{"ast":null,"code":"import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient {\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schemaName = schema;\n    this.fetch = fetch;\n  }\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation) {\n    const url = new URL(`${this.url}/${relation}`);\n    return new PostgrestQueryBuilder(url, {\n      headers: Object.assign({}, this.headers),\n      schema: this.schemaName,\n      fetch: this.fetch\n    });\n  }\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema(schema) {\n    return new PostgrestClient(this.url, {\n      headers: this.headers,\n      schema,\n      fetch: this.fetch\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc(fn) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      head = false,\n      count\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let method;\n    const url = new URL(`${this.url}/rpc/${fn}`);\n    let body;\n    if (head) {\n      method = 'HEAD';\n      Object.entries(args).forEach(_ref => {\n        let [name, value] = _ref;\n        url.searchParams.append(name, `${value}`);\n      });\n    } else {\n      method = 'POST';\n      body = args;\n    }\n    const headers = Object.assign({}, this.headers);\n    if (count) {\n      headers['Prefer'] = `count=${count}`;\n    }\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schemaName,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n}","map":{"version":3,"names":["PostgrestQueryBuilder","PostgrestFilterBuilder","DEFAULT_HEADERS","PostgrestClient","constructor","url","headers","schema","fetch","arguments","length","undefined","Object","assign","schemaName","from","relation","URL","rpc","fn","args","head","count","method","body","entries","forEach","_ref","name","value","searchParams","append","allowEmpty"],"sources":["../../src/PostgrestClient.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,sBAAsB,MAAM,0BAA0B;AAE7D,SAASC,eAAe,QAAQ,aAAa;AAG7C;;;;;;;;;;AAUA,eAAc,MAAOC,eAAe;EAclC;EACA;;;;;;;;;EASAC,YACEC,GAAW,EASL;IAAA,IARN;MACEC,OAAO,GAAG,EAAE;MACZC,MAAM;MACNC;IAAK,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAKH,EAAE;IAEN,IAAI,CAACJ,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQX,eAAe,GAAKI,OAAO,CAAE;IACjD,IAAI,CAACQ,UAAU,GAAGP,MAAM;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;EAUA;;;;;EAKAO,IAAIA,CAACC,QAAgB;IACnB,MAAMX,GAAG,GAAG,IAAIY,GAAG,CAAC,GAAG,IAAI,CAACZ,GAAG,IAAIW,QAAQ,EAAE,CAAC;IAC9C,OAAO,IAAIhB,qBAAqB,CAAcK,GAAG,EAAE;MACjDC,OAAO,EAAAM,MAAA,CAAAC,MAAA,KAAO,IAAI,CAACP,OAAO,CAAE;MAC5BC,MAAM,EAAE,IAAI,CAACO,UAAU;MACvBN,KAAK,EAAE,IAAI,CAACA;KACb,CAAC;EACJ;EAEA;;;;;;;EAOAD,MAAMA,CACJA,MAAqB;IAMrB,OAAO,IAAIJ,eAAe,CAIxB,IAAI,CAACE,GAAG,EAAE;MACVC,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,MAAM;MACNC,KAAK,EAAE,IAAI,CAACA;KACb,CAAC;EACJ;EAEA;;;;;;;;;;;;;;;;;;;;;EAqBAU,GAAGA,CAIDC,EAAgB,EAQV;IAAA,IAPNC,IAAA,GAAAX,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0B,EAAE;IAAA,IAC5B;MACEY,IAAI,GAAG,KAAK;MACZC;IAAK,IAAAb,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAIH,EAAE;IAUN,IAAIc,MAAuB;IAC3B,MAAMlB,GAAG,GAAG,IAAIY,GAAG,CAAC,GAAG,IAAI,CAACZ,GAAG,QAAQc,EAAE,EAAE,CAAC;IAC5C,IAAIK,IAAyB;IAC7B,IAAIH,IAAI,EAAE;MACRE,MAAM,GAAG,MAAM;MACfX,MAAM,CAACa,OAAO,CAACL,IAAI,CAAC,CAACM,OAAO,CAACC,IAAA,IAAkB;QAAA,IAAjB,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAAF,IAAA;QACzCtB,GAAG,CAACyB,YAAY,CAACC,MAAM,CAACH,IAAI,EAAE,GAAGC,KAAK,EAAE,CAAC;MAC3C,CAAC,CAAC;KACH,MAAM;MACLN,MAAM,GAAG,MAAM;MACfC,IAAI,GAAGJ,IAAI;;IAGb,MAAMd,OAAO,GAAAM,MAAA,CAAAC,MAAA,KAAQ,IAAI,CAACP,OAAO,CAAE;IACnC,IAAIgB,KAAK,EAAE;MACThB,OAAO,CAAC,QAAQ,CAAC,GAAG,SAASgB,KAAK,EAAE;;IAGtC,OAAO,IAAIrB,sBAAsB,CAAC;MAChCsB,MAAM;MACNlB,GAAG;MACHC,OAAO;MACPC,MAAM,EAAE,IAAI,CAACO,UAAU;MACvBU,IAAI;MACJhB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBwB,UAAU,EAAE;KACwC,CAAC;EACzD"},"metadata":{},"sourceType":"module"}